<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zsy.mapper.BlogMapper">
    <cache/>
    <resultMap id="blogResultMap" type="com.zsy.model.vo.BlogVo">
        <id column="id" property="id"/>
        <association property="user" column="user_id" javaType="com.zsy.model.vo.SimpleUserVo" select="com.zsy.mapper.SimpleQueryMapper.findByUserId"/>
        <association property="category" column="category_id" javaType="com.zsy.model.vo.CategoryVo" select="com.zsy.mapper.SimpleQueryMapper.findByCategoryId"/>
    </resultMap>

    <resultMap id="blogContentMap" type="com.zsy.model.vo.BlogContentVo">
        <id column="id" property="id"/>
        <association property="user" column="user_id" javaType="com.zsy.model.vo.SimpleUserVo" select="com.zsy.mapper.SimpleQueryMapper.findByUserId"/>
        <association property="category" column="category_id" javaType="com.zsy.model.vo.CategoryVo" select="com.zsy.mapper.SimpleQueryMapper.findByCategoryId"/>
        <association property="topic" column="topic_id" javaType="com.zsy.model.vo.SimpleTopicVo" select="com.zsy.mapper.SimpleQueryMapper.findByTopicId"/>
        <collection property="tags" column="id" javaType="java.util.List" select="com.zsy.mapper.SimpleQueryMapper.findByBlogTagIds"/>
    </resultMap>

    <resultMap id="adminMap" type="com.zsy.model.vo.BlogAdminVo">
        <id column="id" property="id"/>
        <association property="user" column="user_id" javaType="com.zsy.model.vo.SimpleUserVo" select="com.zsy.mapper.SimpleQueryMapper.findByUserId"/>
        <association property="topic" column="topic_id" javaType="com.zsy.model.vo.SimpleTopicVo" select="com.zsy.mapper.SimpleQueryMapper.findByTopicId"/>
        <association property="category" column="category_id" javaType="com.zsy.model.vo.CategoryVo" select="com.zsy.mapper.SimpleQueryMapper.findByCategoryId"/>
    </resultMap>

    <insert id="saveBlog" parameterType="com.zsy.model.pojo.Blog" flushCache="true">
        insert into blogs(description, title, cover_image, source_url, content, create_at, update_at, category_id, user_id, topic_id)
        values (#{description},#{title},#{coverImage},#{sourceUrl},#{content},#{createAt},#{updateAt},#{categoryId},#{userId},#{topicId})
    </insert>

    <update id="updateBlog" parameterType="com.zsy.model.pojo.Blog"  flushCache="true">
        update blogs set description = #{description},title=#{title},cover_image=#{coverImage},source_url=#{sourceUrl},
                         content=#{content},update_at=#{updateAt},category_id = #{categoryId},topic_id=#{topicId}
        <where>
            <choose>
                <when test="userId==-1">
                    AND id = #{id}
                </when>
                <otherwise>
                    AND id  = #{id} and user_id = #{userId}
                </otherwise>
            </choose>
        </where>
    </update>
    <delete id="deleteBlogTagAssociation">
        delete from blogs_tags where blog_id = #{bid}
    </delete>
    <update id="deleteBlogs" flushCache="true">
        update blogs set deleted_at=
        <choose>
            <when test="deleted">
                CURRENT_TIMESTAMP
            </when>
            <otherwise>
                null
            </otherwise>
        </choose>
        <where>
            <choose>
                <when test="uid==-1">
                    AND id in
                    <foreach item="item" collection="bids" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </when>
                <otherwise>
                    AND user_id=#{uid}
                    AND id in
                    <foreach item="item" collection="bids" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </otherwise>
            </choose>
        </where>
    </update>

    <update id="deleteBlog" flushCache="true">
        update blogs set deleted_at=
        <choose>
            <when test="deleted">
                CURRENT_TIMESTAMP
            </when>
            <otherwise>
                null
            </otherwise>
        </choose>
        <where>
            <choose>
                <when test="uid==-1">
                     AND id = #{bid}
                </when>
                <otherwise>
                    AND id = #{bid} and user_id = #{uid}
                </otherwise>
            </choose>
        </where>
    </update>


    <insert id="insertBlogTagAssociation">
        INSERT INTO blogs_tags (blog_id, tag_id) VALUES
        <foreach collection="tids" item="tagId" separator=",">
            (#{bid}, #{tagId})
        </foreach>
    </insert>
    <select id="findPagingCategoryBlog" resultMap="blogResultMap">
        select id,title,description,cover_image,create_at,user_id,category_id from blogs
        <where>
            and deleted_at is null
            <choose>
                <when test="cid>0">
                    and category_id = #{cid}
                </when>
                <otherwise>
                    and category_id is not null
                </otherwise>
            </choose>
            order by ${sort.value}
        </where>
    </select>
    <select id="top10BlogList" resultType="com.zsy.model.vo.SimpleBlogVo">
            select id,title from blogs where deleted_at is null order by eye_count desc offset 0 limit 10
    </select>
    <select id="findAllSimpleBlog" resultType="com.zsy.model.vo.SimpleBlogVo">
            select id,title,description from blogs where deleted_at is null
    </select>
    <select id="findUserPagingCategoryBlog" resultMap="blogResultMap">
        select id,title,description,cover_image,create_at,user_id,category_id from blogs
        where category_id is not null and user_id = #{uid} order by create_at desc
    </select>
    <select id="userTopBlog" resultType="com.zsy.model.vo.SimpleBlogVo">
        select id,title from blogs where category_id is not null and user_id = #{uid} order by eye_count desc offset 0 limit 10
    </select>
    <select id="rangeBlog" resultType="com.zsy.model.vo.SimpleBlogVo">
        select id,title,description from blogs where create_at BETWEEN #{startDate} AND #{endDate} order by create_at desc
    </select>
    <select id="getBlogById" resultMap="blogContentMap">
        select id,title,description,cover_image,create_at,user_id,category_id,topic_id,content,eye_count,like_count,update_at,source_url
        from blogs where deleted_at is null and id = #{bid}
    </select>
    <select id="findAllSimpleBlog2" resultType="com.zsy.model.vo.SimpleBlogVo">
        select id,title from blogs where deleted_at is null
    </select>

    <select id="getUserBlogs" resultMap="adminMap">
        SELECT
        id, title, description, cover_image, source_url, eye_count, like_count, create_at, category_id, user_id, topic_id
        FROM blogs
        <where>
            <if test="uid != -1">
                AND user_id = #{uid}
            </if>
            <if test="request.topic > 0">
                AND topic_id = #{topic}
            </if>
            <if test="request.category > 0">
                AND category_id = #{category}
            </if>
            <if test="request.startDate !=null and request.endDate !=null">
                AND create_at BETWEEN #{request.startDate} AND #{request.endDate}
            </if>
            <if test="request.keyword != null and request.keyword != ''">
                AND (title LIKE CONCAT('%', #{request.keyword}, '%') OR description LIKE CONCAT('%', #{request.keyword}, '%'))
            </if>
            <choose>
                <when test="deleted">
                    AND deleted_at is not null
                </when>
                <otherwise>
                    AND deleted_at is null
                </otherwise>
            </choose>
        </where>
            order by ${request.sort.value}
    </select>
</mapper>
